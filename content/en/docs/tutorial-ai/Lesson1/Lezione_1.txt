Hello everyone. To access the lesson, after starting, the environment and after configuring it, you must be logged in.
The first step is to select here. The first lesson, which is the one that we are about to see and hear all the files of the lesson are downloaded.
If we go and see now, the files you see that there is a new lesson that we can open and we can do the preview of this.
And this is the new lesson. Here, then, this is the first real lesson of the course.
While what you have already seen was lesson zero, which explains how to configure the environment.
Now let's talk about the integrated services. Who are supplied with the system and we show you some examples, which we call hello.
Exercising the various services available. And these are useful both as a code example that one can look at to try out the various services are useful in themselves because they are used for example for debugging for interact with the cache with the database and to do tests.
So the first step is to see these examples. Then I'll show you the tool command line that are even more useful because when you work, you use them extensively and so will end the second module.
Then the third module is that of the exercise in which I show you step by step how implement a simple service, which in this case will not use LLMs.
But it is still used for variations with the environment. And it is the exercise that we will ask you to do even with some modifications in the exercise.
And so we complete the lesson. Well, let's proceed. Downloading the lesson. Hello package was downloaded.
This package contains all the various examples. So an example to exercise the cache that is redis, an example to exercise the store that is milvis, the database, an example to exercise streaming, and an example to exercise the LLM, which is allama, etc.
And there are also two tests, trivial ones that fail that serve to try to correct them and check if the testing system works. Therefore, after downloading, if you go to see the tests and eventually it may take a refresh to see them if you don't see them, here they are.
You see, these are all the tests. We launch them and verify that all services work so now. Let's check that everything goes. The two tests deliberately fail precisely to verify that. Everything works. Then check that everything works by failing some tests and then correcting it.
Okay, here, all the tests work except the two that we have deliberately left broken. So the first exercise you should do to will correct the tests. Then let's go to look for the string to do that says where and we find here the wrong test. The output should be hello and the string high. So I suppose it is understood that it is not this. So we change the string and save it.
Now notice this. If I now perform the test happen that one passes by and is the test unitary because the unitary test. It only requires the code, but the integration test that requires deployment on the system does not pass because we have not deployed it. So what we have to do is go here and do the deploy.
And at this point, the integration test should also pass. So we deploy what now the integration test also passes. So so there is practice with the test performer. In general, it is better put develop mode devil so the development mode has the advantage that it immediately deploys the code.
As soon as you change it, and we will see this when we do the actual exercise. So now let's move on. Let's see the examples. We deployed together with the test. Also all the examples that we can go to see. So when you do the deploy, it also tells you the URL of where the environment is in production.
So each of you will have a different access. So he deployed on the environment and you will have to use the password that you have put before and that I changed. That's it. Good. Now there are new services. Stream, Redis, Olamai, etc. And now we see them one by one. So we realize what is available in the environment.
So first of all, there is obviously the LLM. Since this is a private AI development course, we will use Alma, where we deployed the Alma model, 3.18 billions. But you will find that it is very powerful. In fact, it is remarkable what it can do and is sufficient for for the course objectives.
We'll actually also use a vision model for image recognition and an embed model to do the ending that is used for the RAG. These are things that we will address during the course. So if we click on Alma, here gives us a welcome message. I ask him, who are you? Here's his answer. He says he's an artificial intelligence.
I can also ask questions in Italian. What is the capital of Italy? It is an absolutely remarkable model for what it manages to do. However small, because it is performed on a small GPU that costs quite little. Yet it really does so much.
In fact, the course will purely use this model, although nothing prevents you from using other larger ones and even connect to AI such as open AI, Claude, etc.
If you go and see the code, you will also see the code of the LLM, which is of devastating simplicity. So this is all you need to connect.
Moving on, then the next thing to test is the streamer.
Here, if I write to him, hi, how are you? It does the streaming, that is, it basically takes the string it sends and it tells you the ASCI characters separating them one second from each other to demonstrate how streaming works.
So we also have streaming support. We will see it this one too.
In the next lessons, here too, you can look at the code to understand how streaming works. Now let's see the cache. Redis works with commands.
So the logical thing was to select Redis and be able to talk to him. So for example, I can ask info and gives me all the info or I can ask for the keys that are available and shows them to me.
Etc. It's okay. Then, moving on, the next step is file storage. Then, so this is called S3, but this is not Amazon's S3. That's embedded in Nuvularis.
So this is to list the files that are in the storage. I can also create one plus hello equal world.
Here you see, now I can also list by substring and I can also delete them or upload like this. I now take a file and I upload it. And so if I now make star, here it is, it has arrived.
I did the upload. Then of course, once uploaded, move on to the LLM to process it. Then, last but not least is the vector database.
The vector database is what you need to insert the documents. In our case, Nimbus.
Therefore, I simply write a few things. For example, asterisk test and I look for everything that uses test. Obviously, first I have to insert some texts. So this is a test test. This is another test. I am testing the system.
Okay, now if I do the search with an asterisk test will look for me tests in order of distance, which is an essential concept for research vector, which is practically used to find in documents of the phrases relevant to what you are asking.
So this concept of vector search is essential. This allows you to test. So you are telling me that if I search for the word test, I found some phrases of which the first is the closest to all.
So it's a kind of search for relevance that however, with LLMs is done in a particular way using a technique called embedding, which we will discuss in detail in the lesson relevant our so far we have seen the user interface. And now let's talk about the command line tools.
So there are many command line tools. They are all documented and the tool is called oops. Here, there is explained everything he does. There is also the reference of all the components that there are, which are available. Therefore, are divisions into tools and tasks.
The tools begin with the hyphen and the tasks on the other hand are the things that are normally used of the many available. We will basically focus on ID tasks and on AI tasks, basically a sub command that has many sub commands. Therefore, here we take an example how oops works creating an action and then and then removing it.
So practice I repeat by hand what we did with the extension. And so you better understand how it works. Take lesson one. And I perform this piece of code. Instead of copying it, I run it directly from the example. Now I'm going to give you an introduction to the main commands of oops. The first ops action list is used to list the actions, which are the functions, the components of our applications.
Then we can create an action. I have here added a simple example action of a single file. Usually the actions we use are many when it is a single file you have to package it. But this is done by the other tools when you have an action of only one file you can create it on the fly.
You can invoke it with an input. You can get a URL. By default, the action. It is. So if you try to use it, you will get an error requires permission. But you can make it public. Then you can make an update and put a parameter on it. So this made it public. Now we get a URL. Now we can invoke it directly and pass parameters directly to it using curl, etc.
And finally the possible delete delete. And now we see that it is no longer there. Okay. All right. This is to give you an idea of how it works. But all the other things you can simply see by doing oops minus T and lists all the various action invokers URL logs and then the plugins.
AI IDE admin configuration setup. All this serves to install it. There is really a lot of stuff. So you should go and see the documentation for details. Normally, however, this is what you need. And these are a bit low level, because almost everything is done using IDE actions instead. That are the ones that are here.
So what does the login that you have already seen so I can redo the login. So it's HTTP open serverless point dev. So here I can redo the login instead of using this. Can I deploy, which is the same thing as pressing here, I can deploy only one action.
So if you don't want to redeploy everything every time and you want to deploy one just write oops IDE deploy hello LLM. The difference that there is between the deployment with this tool and the creation of the action is that this manages the packaging of shares and a whole host of extra things that you would otherwise have to do by hand.
It is explained in the documentation how it is done, but this automates it so basically using these tools do now and do it even sooner. Using devil that pretty much throws everything. Pack it up and you can write the code and deploy it on the fly.
Well, last thing that clean, which is useful because there are temporary files and sometimes pieces remain. So it's better to do a clean because it is incremental. So if an old file remains, then you may have some problems and then the clean comes to your rescue.
Okay, so these are the development tools and finally there's a specific plugin for the course that oops AI, which provides a number of fight on specific tools. So Ops AI lesson is used to download the lessons of the course.
Then oops AI user, you saw it. It is used to add and create user. Then there's Ops AI chat, which is very nice because it's a command line version of the chat you saw here. So for example, I can do Ops AI chat hello LLM and I can talk with AI as I did before. Who are you from the command line.
So now I'm talking to llama or I can call the store. Okay, so asterisk that lists the files. I can also upload them like this at tests. Master GPT test hello here. And then AI CLI. This is immensely useful when you do development. In fact, I will use it because it is a Python interpreter.
And finally, Ops AI new that creates you a new service. You have to give it a parameter. In fact, now we will use it in the exercise. All right. So here I am. Summarize the things I have said. So then exercise. Now let's put together everything we have seen doing an exercise. Therefore, preview, I take the exercise.
The exercise consists of implementing a simple chat that in this serves to reverse the text then. So let's go here. Let's go to Alma and write how do I invert the string s in Python.
And told us code to reverse the string. They're going to use this thing to invert the string. Then the goal is to create a new service. And so here we will execute this command, which I can do immediately because as I told you, oops AI to a wizard new reverse and usually makes a package that is called as the action in this case I give him the package mine and I call it reverse messiah.
So I do mine lapels in my pack ag. So if I now go to the packages, you see that there is messiah. So there is a messiah package. There is a reverse service that ready to use for deployment using all the conventions of the environment.
And there are also two tests. Therefore, you see that under Mashiab there is unit reverse testing and integration testing. So if you try to run the tests you will find out right away that the unit integration test passes.
So now I'm going to refresh. Here you are. If I do the integration test passes, but I have the unitary text. No, indeed it had passed because had already been filed before. I try to remove this problem.
So we send it back to the terminal and I do oops action. Delete Mashiab. Reverse. He was not supposed to pass, but unfortunately he remained from the previous time. Then as soon as you create the integration test it should fail because has not been deployed.
Therefore, or deploy it. Everything or just that service. The best thing is to deploy everything. Deploy and then passes the test integration of a service empty practically, which simply it echoes what it writes. So that's it done the deploy.
Let's rerun the integration test and default pass. OK, so now we have a new service that we can use. The nice thing is that we can immediately add this service to the other services simply going here as the slide says, add it to the index.
So there is an index under packages. Mastro GPT index. There are two files. You can create a third file or just edit this one and put the new service on it. Then reverse Mashiab reverse.
OK, good. And now if we go to the user interfaces in M Sahab, we recharge it.
Pinocchio. Gepetto. Login. I realized that I had to deploy also in the index. So OBS I deploy master GPT index. Here this here I had to deploy it.
Here is the reverse, which is trivial because whatever we say to him always tells us the reverse, but it is a starting point right now. Let's implement the actual reverse and go to do the code.
Now here I use Python programmer techniques. So I put the command line here. I take the code of reverse, then packages Mashiab reverse here.
Here you see that there is always a main that calls a function and the function is this. So here we need to implement a. I will explain in the next lessons how it works.
The mechanism, however, sustainably the functionals take an input and return an output. So the thing I do is in equals args get input. And it is better to put this one here, which also gives a default.
Then I write if in equals zero because the first time he start the conversation with a message blank, then please provide an input. So I the answer I will return without and only if I am P is different from empty will out equal to the inverse in practice.
Here is a very simple exercise. It's interesting. When you develop it, put it in devil mode. So as you write the code, he deploys it on the fly. So now.
Okay, if I try to ask him now to redo reverse here, you see that the first time I activate a chat, he sends an empty input and he replied. If I now say Pippo, he gives it to me inverted, adapting it to show you how you can edit.
I now give it an output with an asterisk at the beginning and in the end, just to show you see that he immediately updated everything.
So if I now I try it again, instead he interprets it as italics. If I put the double asterisk instead as bold here, this is a simple exercise, but it allows you to familiarize yourself with the system and to understand how easy it is to create new actions to extend it since we will create many of them.
So I recommend you do it. With this I am finished. Goodbye.
